@model SoftinnBookingSystem.Models.EmployeeInfo

@{
    ViewBag.Title = "Employee Information";
    Layout = "~/Views/Shared/_Layout.cshtml";

}


<div class="row">
    @if (ViewBag.Error != null)
    {
        <div class="alert alert-danger">@ViewBag.Error</div>

    }
</div>
<div class="row">
    <div class="col-md-12">
        <div class="box box-solid">
            <div class="box-header">
                <h3 class="box-title text-danger">Employee Information <small>(New)</small></h3>
            </div>
            <div class="box-body">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                @Html.HiddenFor(model => model.EmployeeID)
                <div class="row">
                    <div class="col-md-6">
                        @*<div class="col-md-6">
                                @Html.LabelFor(model => model.BranchID, htmlAttributes: new { @class = "control-label " })
                                @Html.DropDownListFor(model => model.BranchID, (SelectList)ViewBag.BranchList, "Select Branch", htmlAttributes: new { @class = "form-control Select2", id = "ddlbranchinfo" })
                                @Html.ValidationMessageFor(model => model.BranchID, "", new { @class = "text-danger" })
                            </div>*@
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.DepartmentID, htmlAttributes: new { @class = "control-label " })

                            @Html.DropDownListFor(model => model.DepartmentID, (SelectList)ViewBag.DepartmentList, "Select Department", htmlAttributes: new { @class = "form-control Select2" })
                            @Html.ValidationMessageFor(model => model.DepartmentID, "", new { @class = "text-danger" })
                        </div>
                        <div class="col-md-6">
                            @Html.LabelFor(model => model.DesignationID, htmlAttributes: new { @class = "control-label " })

                            @Html.DropDownListFor(model => model.DesignationID, (SelectList)ViewBag.DesignationList, "Select Designation", htmlAttributes: new { @class = "form-control Select2" })
                            @Html.ValidationMessageFor(model => model.DesignationID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>


            </div>
        </div>
    </div>
</div>


<div class="row">

    <div class="col-md-7">
        <div class="box box-primary">
            <div class="box-header">

                <h3 class="box-title">Personal Details</h3>
            </div>
            <div class="box-body">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <table style="width:100%">

                        <tbody>

                            <tr>
                                <td class="col-md-6">

                                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label " })

                                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

                                </td>

                                <td class="col-md-6">

                                    @Html.LabelFor(model => model.FatherName, htmlAttributes: new { @class = "control-label " })

                                    @Html.EditorFor(model => model.FatherName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })

                                </td>
                            </tr>
                            <tr>
                                <td class="col-md-6">

                                    @Html.LabelFor(model => model.CNIC, htmlAttributes: new { @class = "control-label " })

                                    @Html.EditorFor(model => model.CNIC, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.CNIC, "", new { @class = "text-danger" })

                                </td>
                                <td class="col-md-6">

                                    @Html.LabelFor(model => model.Nationality, htmlAttributes: new { @class = "control-label " })

                                    @Html.EditorFor(model => model.Nationality, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Nationality, "", new { @class = "text-danger" })

                                </td>


                            </tr>
                            <tr>
                                <td class="col-md-6">

                                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label " })

                                    @Html.DropDownListFor(model => model.Gender, (SelectList)ViewBag.GenderList, "Select Gender", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })

                                </td>
                                <td class="col-md-6">
                                    @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label " })

                                    @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control", id = "dtpdob" } })

                                    @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })

                                </td>

                            </tr>
                            <tr>
                                <td class="col-md-3">

                                    @Html.LabelFor(model => model.BloodGroup, htmlAttributes: new { @class = "control-label " })

                                    @Html.EditorFor(model => model.BloodGroup, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger" })

                                </td>

                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
        <div class="box box-danger">
            <div class="box-header">
                <h3 class="box-title">Employeement Details</h3>
            </div>
            <div class="box-body">
                <table style="width:100%">
                    <tr>
                        <td class="col-md-3">

                            @Html.LabelFor(model => model.GPFundNo, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.GPFundNo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.GPFundNo, "", new { @class = "text-danger" })

                        </td>
                        <td class="col-md-3">

                            @Html.LabelFor(model => model.KFFund, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.KFFund, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.KFFund, "", new { @class = "text-danger" })

                        </td>
                        <td class="col-md-3">

                            @Html.LabelFor(model => model.Other, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.Other, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Other, "", new { @class = "text-danger" })

                        </td>

                    </tr>
                    <tr>
                        <td class="col-md-3">

                            @Html.LabelFor(model => model.Qualifications, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.Qualifications, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Qualifications, "", new { @class = "text-danger" })

                        </td>
                        <td class="col-md-3">

                            @Html.LabelFor(model => model.JoiningDate, htmlAttributes: new { @class = "control-label " })


                            @Html.EditorFor(model => model.JoiningDate, new { htmlAttributes = new { @class = "form-control", id = "dtpjoiningdate" } })
                            @Html.ValidationMessageFor(model => model.JoiningDate, "", new { @class = "text-danger" })
                        </td>

                        <td class="col-md-3">

                            @Html.LabelFor(model => model.ConfirmationDate, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.ConfirmationDate, new { htmlAttributes = new { @class = "form-control", id = "dtpconfirmationdate" } })
                            @Html.ValidationMessageFor(model => model.ConfirmationDate, "", new { @class = "text-danger" })

                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="box box-danger">
            <div class="box-header">
                <h3 class="box-title">Contact Information</h3>
            </div>
            <div class="box-body">
                <table style="width:100%">
                    <tr>

                        <td class="col-md-3">

                            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

                        </td>
                        <td class="col-md-3">

                            @Html.LabelFor(model => model.Domicile, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.Domicile, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Domicile, "", new { @class = "text-danger" })

                        </td>

                    </tr>

                    <tr>
                        <td class="col-md-3">
                            @Html.LabelFor(model => model.HomeTel, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.HomeTel, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.HomeTel, "", new { @class = "text-danger" })
                        </td>
                        <td class="col-md-3">
                            @Html.LabelFor(model => model.MobileTel, htmlAttributes: new { @class = "control-label " })
                            @Html.EditorFor(model => model.MobileTel, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MobileTel, "", new { @class = "text-danger" })
                        </td>
                    </tr>
                    <tr>
                        <td class="col-md-3">
                            @Html.Label("Open Time", htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-clock"></i></span>
                                @Html.TextBoxFor(model => model.OpenTime, "{0:hh\\:mm tt}", new { @class = "form-control timepicker" })
                            </div>
                        </td>
                        <td class="col-md-3">
                            @Html.Label("Off Time", htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-clock"></i></span>
                                @Html.TextBoxFor(model => model.OffTime, "{0:hh\\:mm tt}", new { @class = "form-control timepicker" })
                            </div>
                        </td>

                        <!--<td class="col-md-3">
                        @Html.Label("Open Time", htmlAttributes: new { @class = "control-label " })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-clock"></i></span>
                            @Html.EditorFor(model => model.OpenTime, new { htmlAttributes = new { @class = "form-control", @type = "time"  } })-->
                        @*<span class="input-group-addon"><i class="fa fa-clock"></i></span>
                            <select class="form-control" id="openTimeDropdown"></select>*@
                        <!--</div>
                        </td>
                        <td class="col-md-3">
                            @Html.Label("Off Time", htmlAttributes: new { @class = "control-label " })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-clock"></i></span>
                                @Html.EditorFor(model => model.OffTime, new { htmlAttributes = new { @class = "form-control", @type = "time"  } })
                                </div>
                        </td>-->
                    </tr>
                </table>
            </div>
        </div>


    </div>
    <div class="col-md-5">
        <div class="box box-warning">
            <div class="box-header">
                <h3 class="box-title">Salary Details</h3>
            </div>
            <div class="box-body">
                <div class="form-horizontal">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <table style="width:100%">
                        <tr>
                            <td class="col-md-3">

                                @Html.LabelFor(model => model.Salary, htmlAttributes: new { @class = "control-label " })

                                @Html.EditorFor(model => model.Salary, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Salary, "", new { @class = "text-danger" })

                            </td>
                            <td class="col-md-3">

                                @Html.LabelFor(model => model.UtilityAllowance, htmlAttributes: new { @class = "control-label " })

                                @Html.EditorFor(model => model.UtilityAllowance, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.UtilityAllowance, "", new { @class = "text-danger" })

                            </td>
                            <td class="col-md-3">

                                @Html.LabelFor(model => model.MedicalAllowance, htmlAttributes: new { @class = "control-label " })

                                @Html.EditorFor(model => model.MedicalAllowance, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.MedicalAllowance, "", new { @class = "text-danger" })

                            </td>
                        </tr>
                    </table>


                </div>


            </div>
        </div>

        <div class="box box-success">
            <div class="box-header">
                <h3 class="box-title">Bank Account Details</h3>
            </div>
            <div class="box-body">
                <table style="width:100%">
                    <tr>
                        <td class="col-md-8">

                            @Html.LabelFor(model => model.BankAccount, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.BankAccount, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BankAccount, "", new { @class = "text-danger" })

                        </td>
                    </tr>
                    <tr>
                        <td class="col-md-8">

                            @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.BankName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })

                        </td>
                    </tr>
                    <tr>
                        <td class="col-md-8">

                            @Html.LabelFor(model => model.BankBranch, htmlAttributes: new { @class = "control-label" })

                            @Html.EditorFor(model => model.BankBranch, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.BankBranch, "", new { @class = "text-danger" })

                        </td>
                    </tr>
                </table>

            </div>
        </div>
        <div class="box box-success">
            <div class="box-header">
                <h3 class="box-title">Login Details</h3>
            </div>
            <div class="box-body">
                <table style="width:100%">
                    <tr>
                        <td class="col-md-8">
                            @Html.LabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                            <div id="formTitleSuggestions"></div>
                        </td>
                    </tr>
                    <tr>
                        <td class="col-md-8">

                            @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label " })

                            @Html.EditorFor(model => model.Password, new
                            {
                                htmlAttributes = new
                                {
                                    @class = "form-control",
                                    @type =
                           "Password"
                                }
                            })
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })

                        </td>
                    </tr>
                    <tr>
                        <td class="col-md-8">

                            @Html.Label("Allow After 100 Meters", htmlAttributes: new { @class = "control-label" })

                            @Html.CheckBoxFor(model => model.AllowHunderdMeters, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.AllowHunderdMeters, "", new { @class = "text-danger" })

                        </td>
                    </tr>
                    <tr>
                        <td class="col-md-8">

                            @Html.Label("Is Administrator", htmlAttributes: new { @class = "control-label" })

                            @Html.CheckBoxFor(model => model.IsAdmin, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.IsAdmin, "", new { @class = "text-danger" })

                        </td>
                    </tr>

                </table>

            </div>
        </div>
        <div class="box box-solid">
            <div class="box-header">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="button" value="Save" id="Savebtn" onclick="SaveRecord()" class="btn btn-primary pull-right" />
                    </div>
                </div>
                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>
            </div>
        </div>

    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<style>
    .col-md-2 {
        max-width: 100%;
    }
</style>
<script>


        $(document).ready(function () {
            // Initialize timepicker for all elements with the 'timepicker' class
            $('.timepicker').timepicker({
                // Add additional options here if needed
            });
        });





          @*$(document).ready(function () {
            // Check if the EmployeeID is not equal to 0 (indicating edit mode)
            if (@Model.EmployeeID != 0) {
                // Use Razor to inject the formatted time values into the script
                var openTime = "@ViewBag.FormattedOpenTime";
                var offTime = "@ViewBag.FormattedOffTime";

                // Format the time values into HH:mm tt format (e.g., 09:00 AM)
                var formattedOpenTime = formatTime(openTime);
                var formattedOffTime = formatTime(offTime);

                // Set the values of the time inputs
                $("#OpenTime").val(formattedOpenTime);
                $("#OffTime").val(formattedOffTime);
            }
        });*@

        // Function to format time into HH:mm tt format
        function formatTime(time) {
            var timeParts = time.split(":"); // Split the time string into hours and minutes
            var hours = parseInt(timeParts[0]); // Extract the hours part
            var minutes = parseInt(timeParts[1]); // Extract the minutes part

            // Determine AM/PM
            var period = (hours >= 12) ? "PM" : "AM";

            // Adjust hours for 12-hour format
            if (hours > 12) {
                hours -= 12;
            } else if (hours === 0) {
                hours = 12;
            }

            // Format the time string
            var formattedTime = hours + ":" + (minutes < 10 ? '0' : '') + minutes + " " + period;

            return formattedTime;
        }


        //$(document).ready(function () {
        //    // Initialize any plugins or handle time format if necessary

        //    // Example: Using a timepicker plugin to handle AM/PM
        //    $('#OpenTime').timepicker({
        //        timeFormat: 'hh:mm tt',
        //        interval: 15,
        //        defaultTime: 'now',
        //        dynamic: false,
        //        dropdown: true,
        //        scrollbar: true
        //    });

        //    $('#OffTime').timepicker({
        //        timeFormat: 'hh:mm tt',
        //        interval: 15,
        //        defaultTime: 'now',
        //        dynamic: false,
        //        dropdown: true,
        //        scrollbar: true
        //    });
        //});

        $(document).ready(function () {
            if(@Model.EmployeeID!=0)
            {
                $("#DesignationID").val(@Model.DesignationID);
                $("#DepartmentID").val(@Model.DepartmentID);
            }
            $('#UserName').on('input', function () {
                var inputValue = $(this).val().trim();
                var EmployeeID = 0;
                EmployeeID = @Model.EmployeeID;
                // Check if inputValue is not empty
                if (inputValue) {
                    // Send AJAX request to the server to fetch existing FormTitles
                    $.ajax({
                    type: 'POST',
                        url: '/EmployeeInfo/CheckUserName', // Endpoint to check for existing FormTitles
                        data: JSON.stringify({ UserName: inputValue, EmployeeID }),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        success: function (r) {
                            var data = r.split(',');
                            $('#formTitleSuggestions').html('');
                            if (data[0] == "true") {
                                $('#formTitleSuggestions').append('<div>This User Name Already Exists With Name ' + data[1] + '</div>');
                               /* $("#Savebtn").prop('disabled', true);*/
                            } else {
                                $('#formTitleSuggestions').append('');
                                $("#Savebtn").prop('disabled', false);
                            }
                        },
                        error: function (x, e) {
                            bootbox.alert("Error");
                        },
                    });
                }
                else {
                    $('#formTitleSuggestions').html('');
                }
            });
            // Populate open time dropdown
            populate12HourDropdown("openTimeDropdown");

            // Populate off time dropdown
            populate12HourDropdown("offTimeDropdown");

            function populate12HourDropdown(dropdownId) {
                var dropdown = $("#" + dropdownId);

                // Clear existing options
                dropdown.empty();
                dropdown.append($("<option>").val("").text("Select Time"));

                // Populate options for 12 hours (AM)
                for (var i = 1; i <= 12; i++) {
                    var hour = (i < 10) ? "0" + i : i; // Add leading zero for single-digit hours
                    var optionAM = $("<option>").val(hour + ":00 AM").text(hour + ":00 AM");
                    dropdown.append(optionAM);
                }

                // Populate options for 12 hours (PM)
                for (var i = 1; i <= 12; i++) {
                    var hour = (i < 10) ? "0" + i : i; // Add leading zero for single-digit hours
                    var optionPM = $("<option>").val(hour + ":00 PM").text(hour + ":00 PM");
                    dropdown.append(optionPM);
                }
            }
        });



        $(function () {
            $('#dtpdob').datepicker({
                autoclose: true,
                dateFormat: 'yy-mm-dd'
            });

            $('#dtpjoiningdate').datepicker({
                autoclose: true,
                dateFormat: 'yy-mm-dd'
            })

            $('#dtpconfirmationdate').datepicker({
                autoclose: true,
                dateFormat: 'yy-mm-dd'
            })
            //$('#dtpjoiningdate').datetimepicker({ format: 'DD/MM/YYYY' });
            //$('#dtpconfirmationdate').datetimepicker({ format: 'DD/MM/YYYY' });

        });


        function SaveRecord() {

            var objemployee = {};
            objemployee.EmployeeID = $("#EmployeeID").val();
            objemployee.DesignationID = $("#DesignationID").val();
            objemployee.DepartmentID = $("#DepartmentID").val();
            objemployee.Name = $("#Name").val();
            objemployee.FatherName = $("#FatherName").val();
            objemployee.CNIC = $("#CNIC").val();
            objemployee.Nationality = $("#Nationality").val();
            objemployee.Gender = $("#Gender").val();
            objemployee.DOB = $("#dtpdob").val();
            objemployee.Domicile = $("#Domicile").val();
            objemployee.BloodGroup = $("#BloodGroup").val();
            objemployee.GPFundNo = $("#GPFundNo").val();
            objemployee.KFFund = $("#KFFund").val();
            objemployee.Other = $("#Other").val();
            objemployee.Qualifications = $("#Qualifications").val();
            objemployee.JoiningDate = $("#dtpjoiningdate").val();
            objemployee.ConfirmationDate = $("#dtpconfirmationdate").val();
            objemployee.Address = $("#Address").val();
            objemployee.HomeTel = $("#HomeTel").val();
            objemployee.MobileTel = $("#MobileTel").val();
            objemployee.OpenTime = $("#OpenTime").val();
            objemployee.OffTime = $("#OffTime").val();
            objemployee.Salary = $("#Salary").val();
            objemployee.UtilityAllowance = $("#UtilityAllowance").val();
            objemployee.MedicalAllowance = $("#MedicalAllowance").val();
            objemployee.BankAccount = $("#BankAccount").val();
            objemployee.BankName = $("#BankName").val();
            objemployee.BankBranch = $("#BankBranch").val();
            objemployee.UserName = $("#UserName").val();
            objemployee.Password = $("#Password").val();

            if ($('#AllowHunderdMeters').is(":checked")) {
                objemployee.AllowHunderdMeters = 1;
            }
            else {
                objemployee.AllowHunderdMeters = 0;
            }
            if ($('#IsAdmin').is(":checked")) {
                objemployee.IsAdmin = 1;
            }
            else {
                objemployee.IsAdmin = 0;
            }


            if (objemployee.Name == "" || objemployee.Name == 0 || objemployee.Name == null) {
                bootbox.alert("Please Enter Employee Name");
                return;
            }
            if (objemployee.FatherName == "" || objemployee.FatherName == 0 || objemployee.FatherName == null) {
                bootbox.alert("Please Enter Father Name");
                return;
            }
            if (objemployee.UserName == "" || objemployee.UserName == 0 || objemployee.UserName == null) {
                bootbox.alert("Please Enter User Name");
                return;
            }
            if (objemployee.Password == "" || objemployee.Password == 0 || objemployee.Password == null) {
                bootbox.alert("Please Enter Password");
                return;
            }

            $.ajax({
                type: "POST",
                url: "/EmployeeInfo/Create",
                data: JSON.stringify({ objemployee }),
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (r) {
                    window.location.href = "/EmployeeInfo/Index";
                },
                error: function (x, e) {
                    bootbox.alert("Error");
                },
            });

        }
</script>


